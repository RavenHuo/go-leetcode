/**
 * @Author raven
 * @Description
 * @Date 2023/1/10
 **/
package tests

import (
	"context"
	"fmt"
	"go-leetcode/bloomfilter/base"
	"go-leetcode/bloomfilter/bfbyte"
	"gotest.tools/assert"
	"runtime"
	"runtime/debug"
	"testing"
)

func TestCreateBFByte(t *testing.T) {
	//s1 :="{\"0\":\"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\"}"
	////s2 :="{\"0\":\"AQAAAAAAAAAAAAAAOjAAAO8AAAABAAEAAgAAAAMAAgAEAAAABQACAAYAAAAHAAIACAABAAkAAQAKAAEADQABAA4AAQAPAAIAEAABABMABAAUAAAAFQACABYAAQAXAAEAGAAAABkAAAAaAAEAGwACABwAAQAfAAAAIAABACQAAAAlAAEAJgAAACcABAAoAAAAKQABACoAAAArAAIALQABAC4AAQAwAAMAMQAAADIAAAA0AAAANQABADYAAQA3AAAAOQAAADsAAAA8AAAAPQAAAD4AAABAAAEAQQACAEIAAgBDAAAARAACAEUAAQBHAAAASAABAEkAAQBMAAAATQADAE4AAQBQAAMAUgABAFMAAgBUAAIAVQABAFYAAQBXAAIAWAACAFkAAQBaAAAAWwAAAFwAAABdAAAAXgABAGAAAABhAAIAYgACAGMABABlAAIAZgAAAGcAAABoAAAAaQABAGoAAABrAAEAbAABAG0AAABvAAAAcQAAAHIAAABzAAAAdAAAAHUAAQB2AAAAeAAAAHkAAQB6AAAAfAAAAH0AAAB AAMAfwABAIAAAgCBAAEAggAAAIMAAACEAAAAhQABAIYAAQCHAAAAiAACAIkAAQCKAAEAiwACAI0AAQCOAAIAjwACAJAAAACRAAEAkgADAJMAAACUAAEAlQAAAJcAAQCYAAAAmQABAJoAAACbAAIAnAAAAJ0AAQCeAAAAoAAAAKEAAQCiAAAAowACAKQAAQCmAAIApwACAKkAAQCqAAIAqwACAK0AAwCuAAEArwABALAAAgCxAAIAsgAAALMABAC0AAIAtgAAALcAAQC4AAAAuQAAALoAAQC7AAIAvAADAL0AAgC AAEAvwABAMEAAQDDAAAAxQAAAMYAAADHAAIAyAAAAMkAAQDLAAMAzQACAM4AAQDPAAAA0AABANEAAQDSAAAA0wABANQAAADVAAEA1gAAANgAAQDZAAIA2gABANsAAQDcAAAA3QACAN4AAADgAAAA4QAAAOIAAgDjAAEA5AAAAOUAAADnAAIA6AABAOkAAADqAAAA6wAAAOwAAADtAAAA7wACAPAAAADxAAAA8wAAAPQAAAD1AAIA9gABAPcAAAD5AAEA gABAPsAAAD8AAMA/QABAP8AAAAAAQEAAQEBAAIBAgAEAQIABgEAAAcBAQAIAQEACQEAAAoBAQAMAQAADQEAAA4BAAAPAQEAEAEGABEBAQATAQAAFAEEABUBAAAWAQAAGQEBABsBBQAcAQIAHQEBAB4BAAAfAQIAIQEAACIBAAAjAQIAJAEAAIAHAACEBwAAhgcAAIwHAACOBwAAlAcAAJYHAACcBwAAoAcAAKQHAACoBwAArAcAALAHAAC2BwAAugcAAMQHAADGBwAAzAcAANAHAADUBwAA1gcAANgHAADcBwAA4gcAAOYHAADoBwAA7AcAAO4HAADyBwAA9AcAAP4HAAAACAAABAgAAAYIAAAMCAAAEAgAABQIAAAcCAAAHggAACAIAAAiCAAAJggAACoIAAAsCAAALggAADAIAAAyCAAANAgAADYIAAA6CAAAQAgAAEYIAABICAAATggAAFIIAABUCAAAWAgAAFwIAABeCAAAZggAAGoIAAByCAAAdggAAHwIAACCCAAAhggAAIoIAACQCAAAlggAAJoIAACcCAAAnggAAKAIAACiCAAApggAAKgIAACuCAAAtAgAAL4IAADECAAAxggAAMgIAADKCAAAzggAANAIAADUCAAA2AgAANoIAADcCAAA3ggAAOAIAADiCAAA5AgAAOgIAADqCAAA7AgAAPAIAADyCAAA9AgAAPYIAAD CAAAAgkAAAgJAAAMCQAADgkAABAJAAASCQAAFgkAABoJAAAcCQAAIgkAACYJAAAqCQAAMAkAADQJAAA6CQAAQAkAAEIJAABGCQAATgkAAFAJAABUCQAAVgkAAFoJAABcCQAAYAkAAGIJAABoCQAAagkAAG4JAABwCQAAcgkAAHYJAAB4CQAAfgkAAIIJAACICQAAjgkAAJIJAACYCQAAngkAAKYJAACqCQAArgkAALQJAAC6CQAAvAkAAMYJAADMCQAAzgkAANIJAADUCQAA1gkAANoJAADgCQAA6AkAAO4JAADyCQAA9gkAAPoJAAD8CQAA/gkAAAAKAAAGCgAACAoAAAwKAAAUCgAAGgoAAB4KAAAgCgAAJAoAACgKAAAqCgAALgoAADAKAAA0CgAANgoAADoKAABACgAARAoAAEgKAABKCgAAUAoAAFIKAABUCgAAVgoAAFwKAABgCgAAYgoAAGQKAABqCgAAbgoAAHAKAAByCgAAdAoAAHYKAAB4CgAAfgoAAIAKAACCCgAAhAoAAIYKAACMCgAAkAoAAJIKAACWCgAAmgoAAJwKAACkCgAAqAoAAKoKAACuCgAAsgoAALgKAAC CgAAwAoAAMQKAADICgAAygoAAM4KAADQCgAA0goAANQKAADYCgAA5goAAOoKAADsCgAA9goAAPgKAAD6CgAA/goAAAoLAAAQCwAAFAsAABYLAAAcCwAAHgsAACALAAAmCwAAejfBokNHQVuhWyiiSRIQZZ ixdgxxasJuWRosNZeTc6SLRfe1WKil8a/IM3ZGgr2t3 WlQSxjYGOndt0NHkujZa odlNBRgTVWj0aYuyxNEHRJVY0XHWfJzhmuQ8ZFShnvF1QaP282F9bKKm1PYXBXar5MczMGJZbp2DoXDh9OkYMzawbOAfW91lMWosCe5GOmU4v1AMDciB1Gv2w3GpBam7Vp1 srxqpI8jC4ngJ4pBA716FmmoULS090cYlOX2jTfCfybvtr91ExuZnfcHQYFjYOziMa3621VH2AHL AaJCRJ7ma72plLqlQ6JKCY8dozXEXLROGHhoZy6hGXPZ1R3eDYxxrAc/cXVD5N/wasjA3Y7Fd8jTyzLm9aNuHN6hd2IBJgWQG1yW21lu/B3MXvn3ev/WEZqJpM1qkb8ClEsqlK8nBcC8CZGplhTjna39ieHTWQciJbg0X pJ0f4BtY/7iWKzmDkncEV9hVdOtpcgaDHtzbgLcBROFYL8BFKqP4oBa98QPOWS5eIUtXBELfiTdJb s9qcueNxVsah0WiavadNPqXLTDrZz1VQsfl7hYpKVYO/y0EQlMJK1KOtYtDWxUXleNGgHZhuj/JIFsUaTX6oXKUblz3GFoeMod9p0j0OIG9udb8plhqJfKq2D8KE2o7tyXWhiqSXfFjFFOrmVt l5Iu3rNPbtLW iDYrd6vwEzt8fpII75IHHsFcbOV9/EC GwyH PdNKeLyBsQvg7t n1cua/MHUcZQQVvunE6c2/fBRAWWsX0yB7sHpmrizu598Yax2tBOYJX0cGeGNsdTS9qxKcDQaKk61lDBWTGDnXTsB4gkkdWox Lz/qpPLnj5/ZKT1Uw1JJ2MI2Anq2jMy/oq32tmFXKn4 MBlkUzvc7gflVhA1F9MrPx4OHza/aPKQMUrIezI3sMO3icHqQNiEixt41dDiJhPn7y8syimrBgD7zbOj7ktWI1jwjW28WSHpqUZV2DD3O3Xgd3SWAygow0NwgLXSXyfLJrTp7qYLPGM x2/f/3lTgZj1u4lPnXRpTzMhwh YPqjMqN41/xBYqy/CPB22g70BMC7NTrC24oO7lPrlR82i1r9xuwdRuIftLcdXlfIueT4jsjHwMMA4aEg4NJTGlY8e6V71 wfPopHbS4uMC51IRYjZ9n5AP5Yzdy1rqAufcYyIfNCNATpg/pnTrao9TrOXnQTpz3eVytcxS1tzqhshX7HQtD5c/mk1E\"}"
	//reportData := "{\\\"0\\\":\\\"AQAAAAAAAAAAAAAAOjAAAO8AAAABAAEAAgAAAAMAAgAEAAAABQACAAYAAAAHAAIACAABAAkAAQAKAAEADQABAA4AAQAPAAIAEAABABMABAAUAAAAFQACABYAAQAXAAEAGAAAABkAAAAaAAEAGwACABwAAQAfAAAAIAABACQAAAAlAAEAJgAAACcABAAoAAAAKQABACoAAAArAAIALQABAC4AAQAwAAMAMQAAADIAAAA0AAAANQABADYAAQA3AAAAOQAAADsAAAA8AAAAPQAAAD4AAABAAAEAQQACAEIAAgBDAAAARAACAEUAAQBHAAAASAABAEkAAQBMAAAATQADAE4AAQBQAAMAUgABAFMAAgBUAAIAVQABAFYAAQBXAAIAWAACAFkAAQBaAAAAWwAAAFwAAABdAAAAXgABAGAAAABhAAIAYgACAGMABABlAAIAZgAAAGcAAABoAAAAaQABAGoAAABrAAEAbAABAG0AAABvAAAAcQAAAHIAAABzAAAAdAAAAHUAAQB2AAAAeAAAAHkAAQB6AAAAfAAAAH0AAAB AAMAfwABAIAAAgCBAAEAggAAAIMAAACEAAAAhQABAIYAAQCHAAAAiAACAIkAAQCKAAEAiwACAI0AAQCOAAIAjwACAJAAAACRAAEAkgADAJMAAACUAAEAlQAAAJcAAQCYAAAAmQABAJoAAACbAAIAnAAAAJ0AAQCeAAAAoAAAAKEAAQCiAAAAowACAKQAAQCmAAIApwACAKkAAQCqAAIAqwACAK0AAwCuAAEArwABALAAAgCxAAIAsgAAALMABAC0AAIAtgAAALcAAQC4AAAAuQAAALoAAQC7AAIAvAADAL0AAgC AAEAvwABAMEAAQDDAAAAxQAAAMYAAADHAAIAyAAAAMkAAQDLAAMAzQACAM4AAQDPAAAA0AABANEAAQDSAAAA0wABANQAAADVAAEA1gAAANgAAQDZAAIA2gABANsAAQDcAAAA3QACAN4AAADgAAAA4QAAAOIAAgDjAAEA5AAAAOUAAADnAAIA6AABAOkAAADqAAAA6wAAAOwAAADtAAAA7wACAPAAAADxAAAA8wAAAPQAAAD1AAIA9gABAPcAAAD5AAEA gABAPsAAAD8AAMA/QABAP8AAAAAAQEAAQEBAAIBAgAEAQIABgEAAAcBAQAIAQEACQEAAAoBAQAMAQAADQEAAA4BAAAPAQEAEAEGABEBAQATAQAAFAEEABUBAAAWAQAAGQEBABsBBQAcAQIAHQEBAB4BAAAfAQIAIQEAACIBAAAjAQIAJAEAAIAHAACEBwAAhgcAAIwHAACOBwAAlAcAAJYHAACcBwAAoAcAAKQHAACoBwAArAcAALAHAAC2BwAAugcAAMQHAADGBwAAzAcAANAHAADUBwAA1gcAANgHAADcBwAA4gcAAOYHAADoBwAA7AcAAO4HAADyBwAA9AcAAP4HAAAACAAABAgAAAYIAAAMCAAAEAgAABQIAAAcCAAAHggAACAIAAAiCAAAJggAACoIAAAsCAAALggAADAIAAAyCAAANAgAADYIAAA6CAAAQAgAAEYIAABICAAATggAAFIIAABUCAAAWAgAAFwIAABeCAAAZggAAGoIAAByCAAAdggAAHwIAACCCAAAhggAAIoIAACQCAAAlggAAJoIAACcCAAAnggAAKAIAACiCAAApggAAKgIAACuCAAAtAgAAL4IAADECAAAxggAAMgIAADKCAAAzggAANAIAADUCAAA2AgAANoIAADcCAAA3ggAAOAIAADiCAAA5AgAAOgIAADqCAAA7AgAAPAIAADyCAAA9AgAAPYIAAD CAAAAgkAAAgJAAAMCQAADgkAABAJAAASCQAAFgkAABoJAAAcCQAAIgkAACYJAAAqCQAAMAkAADQJAAA6CQAAQAkAAEIJAABGCQAATgkAAFAJAABUCQAAVgkAAFoJAABcCQAAYAkAAGIJAABoCQAAagkAAG4JAABwCQAAcgkAAHYJAAB4CQAAfgkAAIIJAACICQAAjgkAAJIJAACYCQAAngkAAKYJAACqCQAArgkAALQJAAC6CQAAvAkAAMYJAADMCQAAzgkAANIJAADUCQAA1gkAANoJAADgCQAA6AkAAO4JAADyCQAA9gkAAPoJAAD8CQAA/gkAAAAKAAAGCgAACAoAAAwKAAAUCgAAGgoAAB4KAAAgCgAAJAoAACgKAAAqCgAALgoAADAKAAA0CgAANgoAADoKAABACgAARAoAAEgKAABKCgAAUAoAAFIKAABUCgAAVgoAAFwKAABgCgAAYgoAAGQKAABqCgAAbgoAAHAKAAByCgAAdAoAAHYKAAB4CgAAfgoAAIAKAACCCgAAhAoAAIYKAACMCgAAkAoAAJIKAACWCgAAmgoAAJwKAACkCgAAqAoAAKoKAACuCgAAsgoAALgKAAC CgAAwAoAAMQKAADICgAAygoAAM4KAADQCgAA0goAANQKAADYCgAA5goAAOoKAADsCgAA9goAAPgKAAD6CgAA/goAAAoLAAAQCwAAFAsAABYLAAAcCwAAHgsAACALAAAmCwAAejfBokNHQVuhWyiiSRIQZZ ixdgxxasJuWRosNZeTc6SLRfe1WKil8a/IM3ZGgr2t3 WlQSxjYGOndt0NHkujZa odlNBRgTVWj0aYuyxNEHRJVY0XHWfJzhmuQ8ZFShnvF1QaP282F9bKKm1PYXBXar5MczMGJZbp2DoXDh9OkYMzawbOAfW91lMWosCe5GOmU4v1AMDciB1Gv2w3GpBam7Vp1 srxqpI8jC4ngJ4pBA716FmmoULS090cYlOX2jTfCfybvtr91ExuZnfcHQYFjYOziMa3621VH2AHL AaJCRJ7ma72plLqlQ6JKCY8dozXEXLROGHhoZy6hGXPZ1R3eDYxxrAc/cXVD5N/wasjA3Y7Fd8jTyzLm9aNuHN6hd2IBJgWQG1yW21lu/B3MXvn3ev/WEZqJpM1qkb8ClEsqlK8nBcC8CZGplhTjna39ieHTWQciJbg0X pJ0f4BtY/7iWKzmDkncEV9hVdOtpcgaDHtzbgLcBROFYL8BFKqP4oBa98QPOWS5eIUtXBELfiTdJb s9qcueNxVsah0WiavadNPqXLTDrZz1VQsfl7hYpKVYO/y0EQlMJK1KOtYtDWxUXleNGgHZhuj/JIFsUaTX6oXKUblz3GFoeMod9p0j0OIG9udb8plhqJfKq2D8KE2o7tyXWhiqSXfFjFFOrmVt l5Iu3rNPbtLW iDYrd6vwEzt8fpII75IHHsFcbOV9/EC GwyH PdNKeLyBsQvg7t n1cua/MHUcZQQVvunE6c2/fBRAWWsX0yB7sHpmrizu598Yax2tBOYJX0cGeGNsdTS9qxKcDQaKk61lDBWTGDnXTsB4gkkdWox Lz/qpPLnj5/ZKT1Uw1JJ2MI2Anq2jMy/oq32tmFXKn4 MBlkUzvc7gflVhA1F9MrPx4OHza/aPKQMUrIezI3sMO3icHqQNiEixt41dDiJhPn7y8syimrBgD7zbOj7ktWI1jwjW28WSHpqUZV2DD3O3Xgd3SWAygow0NwgLXSXyfLJrTp7qYLPGM x2/f/3lTgZj1u4lPnXRpTzMhwh YPqjMqN41/xBYqy/CPB22g70BMC7NTrC24oO7lPrlR82i1r9xuwdRuIftLcdXlfIueT4jsjHwMMA4aEg4NJTGlY8e6V71 wfPopHbS4uMC51IRYjZ9n5AP5Yzdy1rqAufcYyIfNCNATpg/pnTrao9TrOXnQTpz3eVytcxS1tzqhshX7HQtD5c/mk1E\\\"}"
	//jsonStr, err := strconv.Unquote("\"" + reportData + "\"")
	//assert.NilError(t, err, "should not be nil")
	//
	//_, err = bfbyte.NewDefaultConfig().GetOrBuild([]byte(jsonStr))
	//assert.NilError(t, err, "should not be nil")
	strchan := make(chan int, 10)
	for {
		strchan <- 1
	}
}
func Recover() {

}
func SafeGo(f func()) {
	go func() {
		defer Recover()
		f()
	}()
}

func SafeFunc(f func()) {
	defer func() {
		if e := recover(); e != nil {
			_, file, line, _ := runtime.Caller(1)
			fmt.Printf("recover. line:%s:%d, e:%s \n", file, line, debug.Stack())
		}
	}()
	f()
}

func TestSafeFunc(t *testing.T) {
	for i := 10; i > -1; i-- {
		SafeFunc(func() {
			s := 10 / i
			fmt.Println(s)
			fmt.Println(i)
		})
	}
}

func TestAddBFByte(t *testing.T) {

	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	err = bf.Add(context.Background(), []byte("fuck"))
	assert.NilError(t, err, "should not be nil")
}

func TestClearBFByte(t *testing.T) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	flag := falseNegativeTest(bf, 100000)
	assert.Equal(t, false, flag)
	bf.Clear()
	assert.Equal(t, false, flag)
	flag = falseNegativeTest(bf, 10000)
}

func TestExistsBFByte(t *testing.T) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	err = bf.Add(context.Background(), []byte("fuck"))
	assert.NilError(t, err, "should not be nil")

	// 存在
	exists, err := bf.Exists(context.Background(), []byte("fuck"))
	assert.NilError(t, err, "should not be nil")
	assert.Equal(t, true, exists)
	// check not exists
	exists, err = bf.Exists(context.Background(), []byte("fuck1"))
	assert.Equal(t, false, exists)

}

func TestConcurrentTruePositiveBFByte(t *testing.T) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	flag := truePositiveTest(bf, 200000)
	assert.Equal(t, true, flag)
}

func BenchmarkConcurrentFalsePositiveBenchmarkBFByte(t *testing.B) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	flag := falseNegativeTest(bf, 100000)
	assert.Equal(t, false, flag)
}

func TestConcurrentFalseNegativeBFByte(t *testing.T) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	flag := falseNegativeTest(bf, 100000)
	assert.Equal(t, false, flag)
}

//填满bf之后的假阳率测试
func TestBitmapFalsePositiveBFByte(t *testing.T) {
	reportData := ""
	fpRate := 0.01
	capicity := 1000
	info := base.NewBFInfo("bloom-redis-fp-bitmap-lua", uint64(capicity), fpRate)
	config := bfbyte.NewConfig(*info)
	bf, err := config.GetOrBuild([]byte(reportData))
	defer bf.Clear()
	assert.NilError(t, err, "should not be nil")
	uids := make([][]byte, 1000)
	i := 0
	for i < 1000 {
		uids[i] = []byte(fmt.Sprintf("%d", i))
		i++
	}
	// fill bf with size
	err = testSerialBatchAdds(uids, bf, 100)

	//false samples
	falseSamples := 10000
	fuids := make([][]byte, falseSamples)
	i = 1000
	j := 0
	for j < falseSamples {
		fuids[j] = []byte(fmt.Sprintf("%d", i))
		i++
		j++
	}
	res, _ := testSerialBatchGets(fuids, bf, 100)
	fpCount := 0
	for _, v := range res {
		if v {
			fpCount++
		}
	}
	// 10% of  amplify is normal
	f := float64(falseSamples) * (fpRate * 1.1)
	assert.Check(t, float64(fpCount) < f)
	resLog := fmt.Sprintf("false positive count => %d,capicity => %d, fact fprate => %.3f, expect fprate => %.3f", fpCount, capicity, (float64(fpCount) / float64(falseSamples)), fpRate)
	fmt.Println(resLog)

}

// 校验转换
func TestMarshalBFByte(t *testing.T) {
	reportData := ""
	bf, err := bfbyte.NewDefaultConfig().GetOrBuild([]byte(reportData))
	assert.NilError(t, err, "should not be nil")
	err = bf.Add(context.Background(), []byte("fuck"))
	assert.NilError(t, err, "should not be nil")
	err = bf.Add(context.Background(), []byte("1"))
	err = bf.Add(context.Background(), []byte("2"))
	err = bf.Add(context.Background(), []byte("3"))

	bfByte, err := bf.Marshal()
	fmt.Println(string(bfByte))
	assert.NilError(t, err, "should not be nil")
	assert.Equal(t, true, len(bfByte) != 0)

	resultBf, err := bfbyte.NewDefaultConfig().GetOrBuild(bfByte)
	assert.NilError(t, err, "should not be nil")

	// 存在
	exists, err := resultBf.Exists(context.Background(), []byte("fuck"))

	assert.NilError(t, err, "should not be nil")
	assert.Equal(t, true, exists)

	exists, err = resultBf.Exists(context.Background(), []byte("fuck1"))
	assert.Equal(t, false, exists)
}
